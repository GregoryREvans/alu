import pathlib

import abjad
import baca
import evans
from abjadext import rmakers

import alu

maker = evans.SegmentMaker(
    instruments=alu.instruments,
    names=[
        '"Flute"',
        '"Oboe"',
        r'"Bass Clarinet"',
        '"Bassoon"',
        '"Horn"',
        '"Trumpet"',
        '"Trombone"',
        '"Tuba"',
        '"Percussion 1"',
        '"Percussion 2"',
        r'\with-color #white "Piano LH"',
        r'\with-color #white "Piano RH"',
        '"Violin I"',
        '"Violin II"',
        '"Viola"',
        '"Violoncello"',
        '"Contrabass"',
    ],
    abbreviations=[
        '"fl"',
        '"ob"',
        r'"bcl"',
        '"bs"',
        '"hn"',
        '"tp"',
        '"tbn"',
        '"tba"',
        '"pc 1"',
        '"pc 2"',
        r'\with-color #white "LH"',
        r'\with-color #white "RH"',
        '"vn I"',
        '"vn II"',
        '"va"',
        '"vc"',
        '"cb"',
    ],
    name_staves=True,
    fermata_measures=alu.fermata_measures_06,
    commands=[
        # PREFIX
        evans.attach(
            "bassoon voice",
            abjad.Clef("bass"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.attach(
            "tenor trombone voice",
            abjad.Clef("bass"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.attach(
            "tuba voice",
            abjad.Clef("bass"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.attach(
            "percussion 1 voice",
            abjad.Clef("percussion"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        # evans.attach(
        #     "percussion 1 voice",
        #     abjad.LilyPondLiteral(r"\staff-line-count #4"),
        #     lambda _: abjad.select.leaf(_, 0),
        # ),
        # evans.attach(
        #     "percussion 1 voice",
        #     abjad.Markup(r"\boxed-markup woodblocks #1"),
        #     lambda _: abjad.select.leaf(_, 0),
        #     direction=abjad.UP,
        # ),
        evans.attach(
            "percussion 2 voice",
            abjad.Clef("percussion"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        # evans.attach(
        #     "percussion 2 voice",
        #     abjad.LilyPondLiteral(r"\staff-line-count #4"),
        #     lambda _: abjad.select.leaf(_, 0),
        # ),
        # evans.attach(
        #     "percussion 2 voice",
        #     abjad.Markup(r'\boxed-markup "slit drum" #1'),
        #     lambda _: abjad.select.leaf(_, 0),
        #     direction=abjad.UP,
        # ),
        evans.attach(
            "piano 2 voice",
            abjad.Clef("bass"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.attach(
            "viola voice",
            abjad.Clef("alto"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.attach(
            "cello voice",
            abjad.Clef("bass"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.attach(
            "contrabass voice",
            abjad.Clef("bass"),
            lambda _: abjad.select.leaf(_, 0),
        ),
        # MUSIC
        # FLUTE
        evans.MusicCommand(
            ("flute voice", alu.measure_numbers([1, 2, 3, 4, 5, 6])),
            alu.C_rhythms(stage=1, rotation=0, extra_counts=[0, 1, 2, 3, 2, 1]),
            evans.loop([0], [0.5, 1, 0.5, 1.5, -3]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        # OBOE
        evans.MusicCommand(
            ("oboe voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
            alu.C_rhythms(stage=1, rotation=1, extra_counts=[-1, 0, 1, 2, 3, 2, 1, 0]),
            evans.loop([1], [0.5, 1, 0.5, 1.5, -2.5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        # CLARINET
        evans.MusicCommand(
            ("bass clarinet voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
            alu.C_rhythms(
                stage=1, rotation=2, extra_counts=[-2, -1, 0, 1, 2, 3, 2, 1, 0, -1]
            ),
            evans.loop([-15], [1, 1, 0.5, 1.5, -3.5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("bass clarinet voice", alu.measure_numbers([8, 9, 10])),
            evans.even_division(
                [16],
                extra_counts=[0, 1, 2, 3, 2, 1],
                preprocessor=evans.make_preprocessor(quarters=True),
            ),
            evans.PitchHandler(
                alu.trill_pitches_followed_by_run(
                    [-14 + _ for _ in abjad.math.cumulative_sums([1, 2, 3, 5, 8, 13])],
                    67 // 2,
                ),
                forget=False,
            ),
            abjad.Dynamic("p"),
            lambda _: baca.text_spanner(
                _,
                [r"\half-air-tone-markup", "->", r"\default-notehead-markup"],
                abjad.Tweak(r"\tweak staff-padding 1"),
                abjad.Tweak(r"\tweak color #safe-red"),
                final_piece_spanner=r"\stopTextSpanOne",
                autodetect_right_padding=False,
                bookend=True,
                lilypond_id=1,
                pieces=lambda _: abjad.select.get(
                    abjad.select.partition_by_counts(
                        abjad.select.notes(_), [22], cyclic=False, overhang=False
                    ),
                    [0],
                ),
            ),
            evans.slur(
                [13, 11, 5, 3, 2, 3, 5, 11, 13, 13, 11],
                # direction=abjad.UP,
            ),
            evans.ArticulationHandler(
                ["sfz"],
                forget=False,
                articulation_boolean_vector=abjad.Pattern(
                    abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[1:],
                    period=abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[-1]
                    + 1,
                ).get_boolean_vector(total_length=40),
            ),
            # alu.I_color,
        ),
        evans.MusicCommand(
            ("bass clarinet voice", alu.measure_numbers([13, 14, 15, 16])),
            evans.even_division(
                [16],
                extra_counts=[-1, 0, 1, 2, 3, 2, 1, 0],
                preprocessor=evans.make_preprocessor(quarters=True),
            ),
            evans.PitchHandler(
                alu.trill_pitches_followed_by_run(
                    [-13 + _ for _ in abjad.math.cumulative_sums([1, 2, 3, 5, 8])],
                    67 // 2 // 2,
                ),
                forget=False,
            ),
            abjad.Dynamic("p"),
            lambda _: baca.text_spanner(
                _,
                [r"\half-air-tone-markup", "->", r"\default-notehead-markup"],
                abjad.Tweak(r"\tweak staff-padding 1"),
                abjad.Tweak(r"\tweak color #safe-red"),
                final_piece_spanner=r"\stopTextSpanOne",
                autodetect_right_padding=False,
                bookend=True,
                lilypond_id=1,
                pieces=lambda _: abjad.select.get(
                    abjad.select.partition_by_counts(
                        abjad.select.notes(_), [22], cyclic=False, overhang=False
                    ),
                    [0],
                ),
            ),
            evans.slur(
                [13, 11, 5, 3, 2, 3, 5, 11, 13, 13, 11],
                # direction=abjad.UP,
            ),
            evans.ArticulationHandler(
                ["sfz"],
                forget=False,
                articulation_boolean_vector=abjad.Pattern(
                    abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[1:],
                    period=abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[-1]
                    + 1,
                ).get_boolean_vector(total_length=40),
            ),
            # alu.I_color,
        ),
        evans.MusicCommand(
            ("bass clarinet voice", alu.measure_numbers([26, 27, 28, 29])),
            evans.even_division(
                [16],
                extra_counts=[-2, -1, 0, 1, 2, 3, 2, 1, 0, -1],
                preprocessor=evans.make_preprocessor(quarters=True),
            ),
            evans.PitchHandler(
                alu.trill_pitches_followed_by_run(
                    [-12 + _ for _ in abjad.math.cumulative_sums([1, 2, 3, 5])],
                    67 // 2 // 2 // 2,
                ),
                forget=False,
            ),
            abjad.Dynamic("p"),
            lambda _: baca.text_spanner(
                _,
                [r"\half-air-tone-markup", "->", r"\default-notehead-markup"],
                abjad.Tweak(r"\tweak staff-padding 1"),
                abjad.Tweak(r"\tweak color #safe-red"),
                final_piece_spanner=r"\stopTextSpanOne",
                autodetect_right_padding=False,
                bookend=True,
                lilypond_id=1,
                pieces=lambda _: abjad.select.get(
                    abjad.select.partition_by_counts(
                        abjad.select.notes(_), [22], cyclic=False, overhang=False
                    ),
                    [0],
                ),
            ),
            evans.slur(
                [13, 11, 5, 3, 2, 3, 5, 11, 13, 13, 11],
                # direction=abjad.UP,
            ),
            evans.ArticulationHandler(
                ["sfz"],
                forget=False,
                articulation_boolean_vector=abjad.Pattern(
                    abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[1:],
                    period=abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[-1]
                    + 1,
                ).get_boolean_vector(total_length=40),
            ),
            # alu.I_color,
        ),
        evans.MusicCommand(
            ("bass clarinet voice", alu.measure_numbers([35, 36, 37])),
            evans.even_division(
                [16],
                extra_counts=[-3, -2, -1, 0, 1, 2, 3, 2, 1, 0, -1, -2],
                preprocessor=evans.make_preprocessor(quarters=True),
            ),
            evans.PitchHandler(
                alu.trill_pitches_followed_by_run(
                    [-11 + _ for _ in abjad.math.cumulative_sums([1, 2, 3])],
                    67 // 2 // 2 // 2 // 2,
                ),
                forget=False,
            ),
            abjad.Dynamic("p"),
            lambda _: baca.text_spanner(
                _,
                [r"\half-air-tone-markup", "->", r"\default-notehead-markup"],
                abjad.Tweak(r"\tweak staff-padding 1"),
                abjad.Tweak(r"\tweak color #safe-red"),
                final_piece_spanner=r"\stopTextSpanOne",
                autodetect_right_padding=False,
                bookend=True,
                lilypond_id=1,
                pieces=lambda _: abjad.select.get(
                    abjad.select.partition_by_counts(
                        abjad.select.notes(_), [22], cyclic=False, overhang=False
                    ),
                    [0],
                ),
            ),
            evans.slur(
                [13, 11, 5, 3, 2, 3, 5, 11, 13, 13, 11],
                # direction=abjad.UP,
            ),
            evans.ArticulationHandler(
                ["sfz"],
                forget=False,
                articulation_boolean_vector=abjad.Pattern(
                    abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[1:],
                    period=abjad.math.cumulative_sums(
                        evans.Sequence([13, 11, 5, 3, 2]).mirror(
                            sequential_duplicates=False
                        )
                    )[-1]
                    + 1,
                ).get_boolean_vector(total_length=40),
            ),
            # alu.I_color,
        ),
        # BASSOON
        evans.MusicCommand(
            ("bassoon voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
            alu.C_rhythms(
                stage=1,
                rotation=3,
                extra_counts=[-3, -2, -1, 0, 1, 2, 3, 2, 1, 0, -1, -2],
            ),
            evans.loop([-14], [1, 1, 1.5, 1.5, -4.5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        # HORN
        evans.MusicCommand(
            ("french horn voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7, 8])),
            alu.C_rhythms(
                stage=1,
                rotation=4,
                extra_counts=[-4, -3, -2, -1, 0, 1, 2, 3, 2, 1, 0, -1, -2, -3],
            ),
            evans.loop([-11], [1, 1, 1.5, 1.5, -4]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        # TRUMPET
        evans.MusicCommand(
            ("trumpet voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7, 8])),
            alu.C_rhythms(
                stage=1,
                rotation=5,
                extra_counts=[-3, -4, -3, -2, -1, 0, 1, 2, 3, 2, 1, 0, -1, -2, -3, -4],
            ),
            evans.loop([-1], [1, 1, 1.5, 2, -4]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        # TROMBONE
        evans.MusicCommand(
            ("tenor trombone voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7, 8])),
            alu.C_rhythms(
                stage=1,
                rotation=6,
                extra_counts=[
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                ],
            ),
            evans.loop([-12], [1, 1, 1.5, 2, -3.5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        # TUBA
        evans.MusicCommand(
            ("tuba voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7, 8])),
            alu.C_rhythms(
                stage=1,
                rotation=7,
                extra_counts=[
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                ],
            ),
            evans.loop([-13], [1, 1, 1.5, 2, -4]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        # # PERCUSSION 1 # pli selon pli arpeggio?
        # evans.MusicCommand(
        #     ("percussion 1 voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7, 8])),
        #     evans.make_tied_notes(),
        #     # alu.C_color,
        # ),
        # # PERCUSSION 2
        # evans.MusicCommand(
        #     ("percussion 2 voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
        #     evans.make_tied_notes(),
        #     # alu.C_color,
        # ),
        # # PIANO 1
        # evans.MusicCommand(
        #     ("piano 1 voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
        #     evans.make_tied_notes(),
        #     # alu.C_color,
        # ),
        # evans.MusicCommand(
        #     ("piano 1 voice", alu.measure_numbers([12, 13, 14])),
        #     evans.make_tied_notes(),
        #     # alu.G_color,
        # ),
        # evans.MusicCommand(
        #     ("piano 1 voice", alu.measure_numbers([17, 18, 19, 20])),
        #     evans.make_tied_notes(),
        #     # alu.G_color,
        # ),
        # evans.MusicCommand(
        #     ("piano 1 voice", alu.measure_numbers([30, 31, 32, 33])),
        #     evans.make_tied_notes(),
        #     # alu.G_color,
        # ),
        # # PIANO 2
        # evans.MusicCommand(
        #     ("piano 2 voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
        #     evans.make_tied_notes(),
        #     # alu.C_color,
        # ),
        # evans.MusicCommand(
        #     ("piano 2 voice", alu.measure_numbers([12, 13, 14])),
        #     evans.make_tied_notes(),
        #     # alu.G_color,
        # ),
        # evans.MusicCommand(
        #     ("piano 2 voice", alu.measure_numbers([17, 18, 19, 20])),
        #     evans.make_tied_notes(),
        #     # alu.G_color,
        # ),
        # evans.MusicCommand(
        #     ("piano 2 voice", alu.measure_numbers([30, 31, 32, 33])),
        #     evans.make_tied_notes(),
        #     # alu.G_color,
        # ),
        # VIOLIN 1
        evans.MusicCommand(
            ("violin 1 voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
            alu.C_rhythms(
                stage=1,
                rotation=8,
                extra_counts=[
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                ],
            ),
            evans.loop([-1], [1, 1, 1.5, 2, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(  #
            ("violin 1 voice", alu.measure_numbers([8, 9, 10, 11, 12])),
            evans.tuplet([(2, 1, 1)]),
            evans.loop([7 - 10], [1, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("violin 1 voice", alu.measure_numbers([13, 14, 15])),
            alu.C_rhythms(
                stage=1,
                rotation=9,
                extra_counts=[
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                ],
            ),
            evans.loop([-2], [1, 1, 1.5, 2, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("violin 1 voice", alu.measure_numbers([16, 17])),
            evans.tuplet([(2, 1, 1)]),
            evans.loop([7 - 10 + 1], [1, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("violin 1 voice", alu.measure_numbers([18, 19, 20, 21])),
            alu.C_rhythms(
                stage=1,
                rotation=10,
                extra_counts=[
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                ],
            ),
            evans.loop([-3], [1, 1, 1.5, 2, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            (
                "violin 1 voice",
                alu.measure_numbers([22, 23, 24, 25, 26, 27, 28, 29, 30]),
            ),
            evans.tuplet([(2, 1, 1)]),
            evans.loop([7 - 10 + 2], [1, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("violin 1 voice", alu.measure_numbers([31, 32, 33, 34])),
            alu.C_rhythms(
                stage=1,
                rotation=11,
                extra_counts=[
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                ],
            ),
            evans.loop([-4], [1, 1, 1.5, 2, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("violin 1 voice", alu.measure_numbers([35, 36, 37, 38])),
            evans.tuplet([(2, 1, 1)]),
            evans.loop([7 - 10 + 3], [1, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.select.note(_, -1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        # VIOLIN 2
        evans.MusicCommand(
            ("violin 2 voice", alu.measure_numbers([1, 2, 3, 4, 5, 6, 7])),
            alu.C_rhythms(
                stage=1,
                rotation=12,
                extra_counts=[
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                ],
            ),
            evans.loop([1], [1, 1, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(  #
            ("violin 2 voice", alu.measure_numbers([8, 9, 10, 11, 12])),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1)]),
            evans.loop([6.5 - 10], [0.5, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("violin 2 voice", alu.measure_numbers([13, 14, 15])),
            alu.C_rhythms(
                stage=1,
                rotation=13,
                extra_counts=[
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                ],
            ),
            evans.loop([0], [1, 1, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("violin 2 voice", alu.measure_numbers([16, 17])),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1)]),
            evans.loop([6.5 - 10 + 0.5], [0.5, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("violin 2 voice", alu.measure_numbers([18, 19, 20, 21])),
            alu.C_rhythms(
                stage=1,
                rotation=14,
                extra_counts=[
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                ],
            ),
            evans.loop([-1], [1, 1, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            (
                "violin 2 voice",
                alu.measure_numbers([22, 23, 24, 25, 26, 27, 28, 29, 30]),
            ),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1)]),
            evans.loop([6.5 - 10 + 1], [0.5, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("violin 2 voice", alu.measure_numbers([31, 32, 33, 34])),
            alu.C_rhythms(
                stage=1,
                rotation=15,
                extra_counts=[
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                ],
            ),
            evans.loop([-2], [1, 1, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("violin 2 voice", alu.measure_numbers([35, 36, 37, 38])),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1)]),
            evans.loop([6.5 - 10 + 1.5], [0.5, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.select.note(_, -1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        # VIOLA
        evans.MusicCommand(
            ("viola voice", alu.measure_numbers([1, 2, 3, 4, 5, 6])),
            alu.C_rhythms(
                stage=1,
                rotation=16,
                extra_counts=[
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                ],
            ),
            evans.loop([-7], [1, 1.5, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(  #
            ("viola voice", alu.measure_numbers([7, 8, 9, 10, 11, 12])),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1)]),
            evans.loop([6 - 10], [0, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("viola voice", alu.measure_numbers([13, 14, 15])),
            alu.C_rhythms(
                stage=1,
                rotation=17,
                extra_counts=[
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                ],
            ),
            evans.loop([-8], [1, 1.5, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("viola voice", alu.measure_numbers([16, 17])),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1)]),
            evans.loop([6 - 10 - 0.5], [0, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("viola voice", alu.measure_numbers([18, 19, 20, 21])),
            alu.C_rhythms(
                stage=1,
                rotation=18,
                extra_counts=[
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                ],
            ),
            evans.loop([-9], [1, 1.5, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("viola voice", alu.measure_numbers([22, 23, 24, 25, 26, 27, 28, 29, 30])),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1)]),
            evans.loop([6 - 10 - 1], [0, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("viola voice", alu.measure_numbers([31, 32, 33, 34])),
            alu.C_rhythms(
                stage=1,
                rotation=19,
                extra_counts=[
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                ],
            ),
            evans.loop([-10], [1, 1.5, 1.5, 2.5, -5]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("viola voice", alu.measure_numbers([35, 36, 37, 38])),
            evans.tuplet([(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1)]),
            evans.loop([6 - 10 - 1.5], [0, -0.5, 1]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.select.note(_, -1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        # CELLO
        evans.MusicCommand(
            ("cello voice", alu.measure_numbers([1, 2, 3, 4, 5, 6])),
            alu.C_rhythms(
                stage=1,
                rotation=20,
                extra_counts=[
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                ],
            ),
            evans.loop([-20], [1, 1.5, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(  #
            ("cello voice", alu.measure_numbers([7, 8, 9, 10, 11, 12])),
            evans.tuplet(
                [(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1), (3, 2, 1)]
            ),
            evans.loop([5.5 - 10], [-1, -0.5, 1, -0.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("cello voice", alu.measure_numbers([13, 14, 15])),
            alu.C_rhythms(
                stage=1,
                rotation=21,
                extra_counts=[
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                ],
            ),
            evans.loop([-21], [1, 1.5, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("cello voice", alu.measure_numbers([16, 17])),
            evans.tuplet(
                [(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1), (3, 2, 1)]
            ),
            evans.loop([5.5 - 10 - 1], [-1, -0.5, 1, -0.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("cello voice", alu.measure_numbers([18, 19, 20, 21])),
            alu.C_rhythms(
                stage=1,
                rotation=222,
                extra_counts=[
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                ],
            ),
            evans.loop([-22], [1, 1.5, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("cello voice", alu.measure_numbers([22, 23, 24, 25, 26, 27, 28, 29, 30])),
            evans.tuplet(
                [(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1), (3, 2, 1)]
            ),
            evans.loop([5.5 - 10 - 2], [-1, -0.5, 1, -0.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("cello voice", alu.measure_numbers([31, 32, 33, 34])),
            alu.C_rhythms(
                stage=1,
                rotation=23,
                extra_counts=[
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                ],
            ),
            evans.loop([-23], [1, 1.5, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("cello voice", alu.measure_numbers([35, 36, 37, 38])),
            evans.tuplet(
                [(2, 1, 1), (2, 1, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1), (3, 2, 1)]
            ),
            evans.loop([5.5 - 10 - 3], [-1, -0.5, 1, -0.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.select.note(_, -1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        # BASS
        evans.MusicCommand(
            ("contrabass voice", alu.measure_numbers([1, 2, 3, 4, 5])),
            alu.C_rhythms(
                stage=1,
                rotation=24,
                extra_counts=[
                    4,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                ],
            ),
            evans.loop([-17 - 12], [1, 2, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(  #
            ("contrabass voice", alu.measure_numbers([6, 7, 8, 9, 10, 11, 12])),
            evans.tuplet(
                [
                    (2, 1, 1),
                    (2, 1, 1),
                    (1, 1, 1),
                    (2, 1, 1),
                    (3, 1, 1),
                    (3, 2, 1),
                    (4, 2, 1),
                ]
            ),
            evans.loop([5 - 10], [-1, -1.5, 1, -1.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("contrabass voice", alu.measure_numbers([13, 14, 15])),
            alu.C_rhythms(
                stage=1,
                rotation=25,
                extra_counts=[
                    4,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                ],
            ),
            evans.loop([-18], [1, 2, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("contrabass voice", alu.measure_numbers([16, 17])),
            evans.tuplet(
                [
                    (2, 1, 1),
                    (2, 1, 1),
                    (1, 1, 1),
                    (2, 1, 1),
                    (3, 1, 1),
                    (3, 2, 1),
                    (4, 2, 1),
                ]
            ),
            evans.loop([5 - 10 - 1.5], [-1, -1.5, 1, -1.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("contrabass voice", alu.measure_numbers([18, 19, 20, 21])),
            alu.C_rhythms(
                stage=1,
                rotation=26,
                extra_counts=[
                    4,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                ],
            ),
            evans.loop([-19], [1, 2, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            (
                "contrabass voice",
                alu.measure_numbers([22, 23, 24, 25, 26, 27, 28, 29, 30]),
            ),
            evans.tuplet(
                [
                    (2, 1, 1),
                    (2, 1, 1),
                    (1, 1, 1),
                    (2, 1, 1),
                    (3, 1, 1),
                    (3, 2, 1),
                    (4, 2, 1),
                ]
            ),
            evans.loop([5 - 10 - 3], [-1, -1.5, 1, -1.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.get.leaf(abjad.select.note(_, -1), 1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        evans.MusicCommand(
            ("contrabass voice", alu.measure_numbers([31, 32, 33, 34])),
            alu.C_rhythms(
                stage=1,
                rotation=27,
                extra_counts=[
                    4,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                    2,
                    1,
                    0,
                    -1,
                    -2,
                    -3,
                    -4,
                    -3,
                    -2,
                    -1,
                    0,
                    1,
                    2,
                    3,
                ],
            ),
            evans.loop([-20], [1, 2, 2.5, 2.5, -7]),
            evans.upward_gliss,
            abjad.Dynamic("fff"),
            # alu.C_color,
        ),
        evans.MusicCommand(
            ("contrabass voice", alu.measure_numbers([35, 36, 37, 38])),
            evans.tuplet(
                [
                    (2, 1, 1),
                    (2, 1, 1),
                    (1, 1, 1),
                    (2, 1, 1),
                    (3, 1, 1),
                    (3, 2, 1),
                    (4, 2, 1),
                ]
            ),
            evans.loop([5 - 10 - 4.5], [-1, -1.5, 1, -1.5]),
            lambda _: abjad.glissando(_),
            abjad.StartTrillSpan(),
            evans.Attachment(
                abjad.StopTrillSpan(),
                selector=lambda _: abjad.select.note(_, -1),
            ),
            lambda _: baca.hairpin(_, "p < ff"),
            # alu.G_color,
        ),
        # SUFFIX
        evans.attach(
            "Global Context",
            alu.mod_122_105,
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.attach(
            "Global Context",
            alu.met_105,
            lambda _: abjad.select.leaf(_, 0),
        ),
        evans.call(
            "score",
            evans.SegmentMaker.beam_score_without_splitting,
            lambda _: abjad.select.components(_, abjad.Score),
        ),
    ],
    score_template=alu.score,
    transpose_from_sounding_pitch=True,
    transpose_first=True,
    color_out_of_range=False,
    time_signatures=alu.signatures_06,
    clef_handlers=None,
    tuplet_bracket_noteheads=False,
    add_final_grand_pause=False,
    score_includes=[
        "abjad.ily",
        "../../build/segment_stylesheet.ily",
    ],
    segment_name="06",
    current_directory=pathlib.Path(__file__).parent,
    cutaway=False,
    beam_pattern="meter",
    beam_rests=True,
    barline="||",
    rehearsal_mark="",
    fermata="scripts.ufermata",
    with_layout=True,
    mm_rests=True,
    extra_rewrite=False,  # should default to false but defaults to true
    print_clock_time=True,
)

maker.build_segment()
